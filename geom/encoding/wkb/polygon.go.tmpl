package wkb

import (
	"encoding/binary"
	"github.com/pmaseberg/gogeom/geom"
	"io"
){{range .Dims}}

func polygon{{.ZM}}Reader(r io.Reader, byteOrder binary.ByteOrder) (geom.T, error) {
	var numRings uint32
	if err := binary.Read(r, byteOrder, &numRings); err != nil {
		return nil, err
	}
	ring{{.ZM}}s := make([][]geom.Point{{.ZM}}, numRings)
	for i := uint32(0); i < numRings; i++ {
		if point{{.ZM}}s, err := readPoint{{.ZM}}s(r, byteOrder); err != nil {
			return nil, err
		} else {
			ring{{.ZM}}s[i] = point{{.ZM}}s
		}
	}
	return geom.Polygon{{.ZM}}{Rings: ring{{.ZM}}s}, nil
}

func writePolygon{{.ZM}}(w io.Writer, byteOrder binary.ByteOrder, polygon{{.ZM}} geom.Polygon{{.ZM}}) error {
	return writePoint{{.ZM}}ss(w, byteOrder, polygon{{.ZM}}.Rings)
}{{end}}
