package wkb

import (
	"encoding/binary"
	"github.com/pmaseberg/gogeom/geom"
	"io"
){{range .Dims}}

func multiPolygon{{.ZM}}Reader(r io.Reader, byteOrder binary.ByteOrder) (geom.T, error) {
	var numPolygons uint32
	if err := binary.Read(r, byteOrder, &numPolygons); err != nil {
		return nil, err
	}
	polygon{{.ZM}}s := make([]geom.Polygon{{.ZM}}, numPolygons)
	for i := uint32(0); i < numPolygons; i++ {
		if g, err := Read(r); err == nil {
			var ok bool
			polygon{{.ZM}}s[i], ok = g.(geom.Polygon{{.ZM}})
			if !ok {
				return nil, &UnexpectedGeometryError{g}
			}
		} else {
			return nil, err
		}
	}
	return geom.MultiPolygon{{.ZM}}{Polygons: polygon{{.ZM}}s}, nil
}

func writeMultiPolygon{{.ZM}}(w io.Writer, byteOrder binary.ByteOrder, multiPolygon{{.ZM}} geom.MultiPolygon{{.ZM}}) error {
	if err := binary.Write(w, byteOrder, uint32(len(multiPolygon{{.ZM}}.Polygons))); err != nil {
		return err
	}
	for _, polygon{{.ZM}} := range multiPolygon{{.ZM}}.Polygons {
		if err := Write(w, byteOrder, polygon{{.ZM}}); err != nil {
			return err
		}
	}
	return nil
}{{end}}
