package wkb

import (
	"encoding/binary"
	"github.com/pmaseberg/gogeom/geom"
	"io"
){{range .Dims}}

func geometryCollection{{.ZM}}Reader(r io.Reader, byteOrder binary.ByteOrder) (geom.T, error) {
	var numGeometries uint32
	if err := binary.Read(r, byteOrder, &numGeometries); err != nil {
		return nil, err
	}
	geom{{.ZM}}s := make([]geom.Geom{{.ZM}}, numGeometries)
	for i := uint32(0); i < numGeometries; i++ {
		if g, err := Read(r); err == nil {
			var ok bool
			geom{{.ZM}}s[i], ok = g.(geom.Geom{{.ZM}})
			if !ok {
				return nil, &UnexpectedGeometryError{g}
			}
		} else {
			return nil, err
		}
	}
	return geom.GeometryCollection{{.ZM}}{Geoms: geom{{.ZM}}s}, nil
}

func writeGeometryCollection{{.ZM}}(w io.Writer, byteOrder binary.ByteOrder, geometryCollection{{.ZM}} geom.GeometryCollection{{.ZM}}) error {
	if err := binary.Write(w, byteOrder, uint32(len(geometryCollection{{.ZM}}.Geoms))); err != nil {
		return err
	}
	for _, geom{{.ZM}} := range geometryCollection{{.ZM}}.Geoms {
		if err := Write(w, byteOrder, geom{{.ZM}}); err != nil {
			return err
		}
	}
	return nil
}{{end}}
