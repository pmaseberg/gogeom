package wkb

import (
	"encoding/binary"
	"github.com/pmaseberg/gogeom/geom"
	"io"
){{range .Dims}}

func point{{.ZM}}Reader(r io.Reader, byteOrder binary.ByteOrder) (geom.T, error) {
	point{{.ZM}} := geom.Point{{.ZM}}{}
	if err := binary.Read(r, byteOrder, &point{{.ZM}}); err != nil {
		return nil, err
	}
	return point{{.ZM}}, nil
}

func readPoint{{.ZM}}s(r io.Reader, byteOrder binary.ByteOrder) ([]geom.Point{{.ZM}}, error) {
	var numPoints uint32
	if err := binary.Read(r, byteOrder, &numPoints); err != nil {
		return nil, err
	}
	point{{.ZM}}s := make([]geom.Point{{.ZM}}, numPoints)
	if err := binary.Read(r, byteOrder, &point{{.ZM}}s); err != nil {
		return nil, err
	}
	return point{{.ZM}}s, nil
}

func writePoint{{.ZM}}(w io.Writer, byteOrder binary.ByteOrder, point{{.ZM}} geom.Point{{.ZM}}) error {
	return binary.Write(w, byteOrder, &point{{.ZM}})
}

func writePoint{{.ZM}}s(w io.Writer, byteOrder binary.ByteOrder, point{{.ZM}}s []geom.Point{{.ZM}}) error {
	if err := binary.Write(w, byteOrder, uint32(len(point{{.ZM}}s))); err != nil {
		return err
	}
	return binary.Write(w, byteOrder, &point{{.ZM}}s)
}

func writePoint{{.ZM}}ss(w io.Writer, byteOrder binary.ByteOrder, point{{.ZM}}ss [][]geom.Point{{.ZM}}) error {
	if err := binary.Write(w, byteOrder, uint32(len(point{{.ZM}}ss))); err != nil {
		return err
	}
	for _, point{{.ZM}}s := range point{{.ZM}}ss {
		if err := writePoint{{.ZM}}s(w, byteOrder, point{{.ZM}}s); err != nil {
			return err
		}
	}
	return nil

}{{end}}
