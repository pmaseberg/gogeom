package wkb

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"github.com/pmaseberg/gogeom/geom"
	"io"
	"reflect"
)

const (
	wkbXDR = 0
	wkbNDR = 1
)

const (
	wkbPoint                = 1
	wkbPointZ               = 1001
	wkbPointM               = 2001
	wkbPointZM              = 3001
	wkbLineString           = 2
	wkbLineStringZ          = 1002
	wkbLineStringM          = 2002
	wkbLineStringZM         = 3002
	wkbPolygon              = 3
	wkbPolygonZ             = 1003
	wkbPolygonM             = 2003
	wkbPolygonZM            = 3003
	wkbMultiPoint           = 4
	wkbMultiPointZ          = 1004
	wkbMultiPointM          = 2004
	wkbMultiPointZM         = 3004
	wkbMultiLineString      = 5
	wkbMultiLineStringZ     = 1005
	wkbMultiLineStringM     = 2005
	wkbMultiLineStringZM    = 3005
	wkbMultiPolygon         = 6
	wkbMultiPolygonZ        = 1006
	wkbMultiPolygonM        = 2006
	wkbMultiPolygonZM       = 3006
	wkbGeometryCollection   = 7
	wkbGeometryCollectionZ  = 1007
	wkbGeometryCollectionM  = 2007
	wkbGeometryCollectionZM = 3007
	wkbPolyhedralSurface    = 15
	wkbPolyhedralSurfaceZ   = 1015
	wkbPolyhedralSurfaceM   = 2015
	wkbPolyhedralSurfaceZM  = 3015
	wkbTIN                  = 16
	wkbTINZ                 = 1016
	wkbTINM                 = 2016
	wkbTINZM                = 3016
	wkbTriangle             = 17
	wkbTriangleZ            = 1017
	wkbTriangleM            = 2017
	wkbTriangleZM           = 3017
)

var (
	XDR = binary.BigEndian
	NDR = binary.LittleEndian
)

type UnexpectedGeometryError struct {
	Geom geom.T
}

func (e UnexpectedGeometryError) Error() string {
	return fmt.Sprintf("wkb: unexpected geometry %v", e.Geom)
}

type UnsupportedGeometryError struct {
	Type reflect.Type
}

func (e UnsupportedGeometryError) Error() string {
	return "wkb: unsupported type: " + e.Type.String()
}

type wkbReader func(io.Reader, binary.ByteOrder) (geom.T, error)

var wkbReaders map[uint32]wkbReader

func init() {
	wkbReaders = make(map[uint32]wkbReader){{range .Dims}}
	wkbReaders[wkbPoint{{.ZM}}] = point{{.ZM}}Reader{{end}}{{range .Dims}}
	wkbReaders[wkbLineString{{.ZM}}] = lineString{{.ZM}}Reader{{end}}{{range .Dims}}
	wkbReaders[wkbPolygon{{.ZM}}] = polygon{{.ZM}}Reader{{end}}{{range .Dims}}
	wkbReaders[wkbMultiPoint{{.ZM}}] = multiPoint{{.ZM}}Reader{{end}}{{range .Dims}}
	wkbReaders[wkbMultiLineString{{.ZM}}] = multiLineString{{.ZM}}Reader{{end}}{{range .Dims}}
	wkbReaders[wkbMultiPolygon{{.ZM}}] = multiPolygon{{.ZM}}Reader{{end}}{{range .Dims}}
	wkbReaders[wkbGeometryCollection{{.ZM}}] = geometryCollection{{.ZM}}Reader{{end}}
}

func Read(r io.Reader) (geom.T, error) {

	var wkbByteOrder uint8
	if err := binary.Read(r, binary.LittleEndian, &wkbByteOrder); err != nil {
		return nil, err
	}
	var byteOrder binary.ByteOrder
	switch wkbByteOrder {
	case wkbXDR:
		byteOrder = binary.BigEndian
	case wkbNDR:
		byteOrder = binary.LittleEndian
	default:
		return nil, fmt.Errorf("invalid byte order %u", wkbByteOrder)
	}

	var wkbGeometryType uint32
	if err := binary.Read(r, byteOrder, &wkbGeometryType); err != nil {
		return nil, err
	}

	if reader, ok := wkbReaders[wkbGeometryType]; ok {
		return reader(r, byteOrder)
	} else {
		return nil, fmt.Errorf("unsupported geometry type %u", wkbGeometryType)
	}

}

func Decode(buf []byte) (geom.T, error) {
	return Read(bytes.NewBuffer(buf))
}

func writeMany(w io.Writer, byteOrder binary.ByteOrder, data ...interface{}) error {
	for _, datum := range data {
		if err := binary.Write(w, byteOrder, datum); err != nil {
			return err
		}
	}
	return nil
}

func Write(w io.Writer, byteOrder binary.ByteOrder, g geom.T) error {
	var wkbByteOrder uint8
	switch byteOrder {
	case XDR:
		wkbByteOrder = wkbXDR
	case NDR:
		wkbByteOrder = wkbNDR
	default:
		return fmt.Errorf("unsupported byte order %v", byteOrder)
	}
	if err := binary.Write(w, byteOrder, wkbByteOrder); err != nil {
		return err
	}
	var wkbGeometryType uint32
	switch g.(type) {
{{range .Dims}}	case geom.Point{{.ZM}}:
		wkbGeometryType = wkbPoint{{.ZM}}
{{end}}{{range .Dims}}	case geom.LineString{{.ZM}}:
		wkbGeometryType = wkbLineString{{.ZM}}
{{end}}{{range .Dims}}	case geom.Polygon{{.ZM}}:
		wkbGeometryType = wkbPolygon{{.ZM}}
{{end}}{{range .Dims}}	case geom.MultiPoint{{.ZM}}:
		wkbGeometryType = wkbMultiPoint{{.ZM}}
{{end}}{{range .Dims}}	case geom.MultiLineString{{.ZM}}:
		wkbGeometryType = wkbMultiLineString{{.ZM}}
{{end}}{{range .Dims}}	case geom.MultiPolygon{{.ZM}}:
		wkbGeometryType = wkbMultiPolygon{{.ZM}}
{{end}}{{range .Dims}}	case geom.GeometryCollection{{.ZM}}:
		wkbGeometryType = wkbGeometryCollection{{.ZM}}
{{end}}	default:
		return &UnsupportedGeometryError{reflect.TypeOf(g)}
	}
	if err := binary.Write(w, byteOrder, wkbGeometryType); err != nil {
		return err
	}
	switch g.(type) {
{{range .Dims}}	case geom.Point{{.ZM}}:
		return writePoint{{.ZM}}(w, byteOrder, g.(geom.Point{{.ZM}}))
{{end}}{{range .Dims}}	case geom.LineString{{.ZM}}:
		return writeLineString{{.ZM}}(w, byteOrder, g.(geom.LineString{{.ZM}}))
{{end}}{{range .Dims}}	case geom.Polygon{{.ZM}}:
		return writePolygon{{.ZM}}(w, byteOrder, g.(geom.Polygon{{.ZM}}))
{{end}}{{range .Dims}}	case geom.MultiPoint{{.ZM}}:
		return writeMultiPoint{{.ZM}}(w, byteOrder, g.(geom.MultiPoint{{.ZM}}))
{{end}}{{range .Dims}}	case geom.MultiLineString{{.ZM}}:
		return writeMultiLineString{{.ZM}}(w, byteOrder, g.(geom.MultiLineString{{.ZM}}))
{{end}}{{range .Dims}}	case geom.MultiPolygon{{.ZM}}:
		return writeMultiPolygon{{.ZM}}(w, byteOrder, g.(geom.MultiPolygon{{.ZM}}))
{{end}}{{range .Dims}}	case geom.GeometryCollection{{.ZM}}:
		return writeGeometryCollection{{.ZM}}(w, byteOrder, g.(geom.GeometryCollection{{.ZM}}))
{{end}}	default:
		return &UnsupportedGeometryError{reflect.TypeOf(g)}
	}
}

func Encode(g geom.T, byteOrder binary.ByteOrder) ([]byte, error) {
	w := bytes.NewBuffer(nil)
	if err := Write(w, byteOrder, g); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
